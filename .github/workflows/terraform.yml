name: 'Terraform'

on:
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        #working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      if: github.event_name == 'pull_request'
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files validate
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      #run: terraform fmt -check
      run: terraform fmt 
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      #if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      continue-on-error: true
        
    - name: Github push
      id: github-push
#      #if: steps.fmt.outputs.modified == 'true'
      continue-on-error: true
      run: |
        echo "The event.name = ${{ steps.fmt.outputs.stdout }}"
        echo "The modified = ${{ steps.fmt.outputs.modified }}"
        echo "The stdout = ${{ steps.fmt.outputs.stdout }}"
        echo "The conclusion = ${{ steps.fmt.conclusion }}"
        echo "The outcome = ${{ steps.fmt.outcome }}"
        git config --global user.name 'Github auto formatter'
        git config --global user.email 'autoformat@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git commit -am "Terraform formatting"
        git push origin


