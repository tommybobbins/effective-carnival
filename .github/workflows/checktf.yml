name: terraform-format-validaton

on:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  terraform-validate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
           terraform init
           find . -ls

    # Checks that all Terraform configuration files validate
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: tf_fmt
      #run: terraform fmt -check
      run: |
        terraform fmt 
        echo "::set-output name=status_code::$(echo $?)\n"
      continue-on-error: true

    - name: Format output
      id: github-push
      continue-on-error: true
      run: |
        echo "The outcome was = ${{ steps.tf_fmt.outcome }}"
        echo "The event.name = ${{ steps.tf_fmt.outputs.stdout }}"
        echo "The modified = ${{ steps.tf_fmt.outputs.modified }}"
        echo "The stdout = ${{ steps.tf_fmt.outputs.error }}"

    - uses: actions/github-script@0.9.0
      if: steps.tf_fmt.outputs.status_code != 0 && github.event_name == 'pull_request'
      #if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      continue-on-error: true

    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Apply terraform fmt changes
